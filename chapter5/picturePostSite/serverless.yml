# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: picturePostSite # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

custom:
  BUCKET_NAME: picture-post-photos
  TABLE_NAME: picture_post_photos

provider:
  name: aws
  runtime: go1.x
  region: ap-northeast-1
  role: RootRole

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

package:
 exclude:
   - ./**
 include:
   - ./bin/**

functions:
  postImages:
    handler: bin/images/post
    events:
      - http:
          path: images
          method: post
    environment:
      BUCKET_NAME: ${self:custom.BUCKET_NAME}
      TABLE_NAME: ${self:custom.TABLE_NAME}
  updateImages:
    handler: bin/images/update
    events:
      - http:
          path: images
          method: put
    environment:
      TABLE_NAME: ${self:custom.TABLE_NAME}
  getImageById:
    handler: bin/images/id/get
    events:
      - http:
          path: images/{id}
          method: get
    environment:
      TABLE_NAME: ${self:custom.TABLE_NAME}
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    # 静的ファイルの配信用バケット
    S3Bucket:
      Type: "AWS::S3::Bucket"
      Properties:
        BucketName: picture-post-web-site
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
      DeletionPolicy: Retain
    BucketPolicy: 
      Type: "AWS::S3::BucketPolicy"
      Properties: 
        Bucket: 
          Ref: "S3Bucket"
        PolicyDocument: 
          Statement: 
            - 
              Action: 
                - "s3:GetObject"
              Effect: "Allow"
              Resource: 
                Fn::Join: 
                  - ""
                  - 
                    - "arn:aws:s3:::"
                    - 
                      Ref: "S3Bucket"
                    - "/*"
              Principal: "*"
    # 写真画像の保存先となるバケット
    S3BucketPhotos:
      Type: "AWS::S3::Bucket"
      Properties:
        BucketName: picture-post-photos
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
      DeletionPolicy: Retain
    BucketPhotosPolicy: 
      Type: "AWS::S3::BucketPolicy"
      Properties: 
        Bucket: 
          Ref: "S3BucketPhotos"
        PolicyDocument: 
          Statement: 
            - 
              Action: 
                - "s3:GetObject"
              Effect: "Allow"
              Resource: 
                Fn::Join: 
                  - ""
                  - 
                    - "arn:aws:s3:::"
                    - 
                      Ref: "S3BucketPhotos"
                    - "/*"
              Principal: "*"
    # DynamoDB
    DynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: picture_post_photos
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    # Role
    RootRole: 
      Type: "AWS::IAM::Role"
      Properties: 
        AssumeRolePolicyDocument: 
          Version: "2012-10-17"
          Statement: 
            - 
              Effect: "Allow"
              Principal: 
                Service: 
                  - "lambda.amazonaws.com"
              Action: 
                - "sts:AssumeRole"
        Path: "/"
    RolePolicies: 
      Type: "AWS::IAM::Policy"
      Properties: 
        PolicyName: "root"
        PolicyDocument: 
          Version: "2012-10-17"
          Statement: 
            - 
              Effect: "Allow"
              Action:
                - dynamodb:Query
                - dynamodb:Scan
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:DeleteItem
              Resource: arn:aws:dynamodb:ap-northeast-1:${opt:account}:table/picture_post_photos
            -
              Effect: "Allow"
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: arn:aws:logs:ap-northeast-1:*:*
            -
              Effect: "Allow"
              Action:
                - s3:PutObject
              Resource: arn:aws:s3:::picture-post-web-site
        Roles: 
          - 
            Ref: "RootRole"
    RootInstanceProfile: 
      Type: "AWS::IAM::InstanceProfile"
      Properties: 
        Path: "/"
        Roles: 
          - 
            Ref: "RootRole"
  Outputs:
    OutputS3Bucket:
      Value:
        Ref: "S3Bucket"
      Description: S3 Bucket

